/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 houdiniSpherePoints3.gltf --transform
*/

import React, { useMemo, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { Group, Mesh, Points, ShaderMaterial } from 'three'
import passthroughVert from './shaders/passthroughVert';
import spikePointShader from './shaders/spikePointShader';
import { useFrame } from '@react-three/fiber';

export const SpikePoints = ({ ...props })  => {
  const groupRef = useRef<Group>(null);
  const shaderRef = useRef<ShaderMaterial>(null);
  const { nodes } = useGLTF('/houdiniSpherePoints3-transformed.glb') as unknown as { nodes: { sphere: Mesh, spikes: Points }}
  const uniforms = useMemo(() => ({ anim: {value: 0} }), []);

  useFrame((state) => {
    if(!shaderRef.current || !groupRef.current) return;
    const t = state.clock.getElapsedTime() / 1;
    if(t < 1) {
      shaderRef.current.uniforms.anim.value = t;
      shaderRef.current.uniformsNeedUpdate = true;
    }
    
    groupRef.current.rotation.y = t/2;
  }) 

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh geometry={nodes.sphere.geometry} material={nodes.sphere.material} />
      <points geometry={nodes.spikes.geometry} >
        <shaderMaterial
          ref={shaderRef}
          uniforms={uniforms}
          fragmentShader={spikePointShader()}
          vertexShader={passthroughVert()}
          transparent
        />
      </points>
    </group>
  )
}

useGLTF.preload('/houdiniSpherePoints3-transformed.glb')
